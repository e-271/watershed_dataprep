""" Residualize expression by covariates, and call outliers. """
configfile: "config/config.yaml"

# Get top eQTL per gene & output as a tsv file.
rule top_eqtl_per_gene:
    input: "data/expression/eQTL.txt"
    output: 
        tsv="data/expression/top_eQTL.tsv",
        sorted=temp("data/expression/top_eQTL.sorted.tsv"),
        sortedgz="data/expression/top_eQTL.sorted.tsv.gz"
    shell:
        '''
        Rscript scripts/top_eqtl.R {input} > {output.tsv}
        cat {output.tsv} | sort -g -k 1 -k 2 > {output.sorted}
        bgzip {output.sorted}
        tabix -s 1 -b 2 -e 3 {output.sortedgz}
        '''

# Get sample genotypes for top1 eQTLs.
# Input VCF should be quality-filtered, and multiallelic sites split with bcftools norm -m
rule eqtl_genotypes:
    input: 
        vcf="data/vcf/30x.AFGR.norm.vcf.gz",
        tsv="data/expression/top_eQTL.sorted.tsv.gz"
    output:
        eqtl="data/expression/norm.top_eQTL.vcf.gz",
        tsv="data/expression/genotypes.top_eQTL.tsv"
    shell:
        '''
        # Subset to top eQTL regions & annotate eQTL gene / pvalue.
        echo '##INFO=<ID=eQTL_gene,Number=1,Type=String,Description="eQTL gene for this locus.">' > header.tmp
        echo '##INFO=<ID=eQTL_pvalue,Number=1,Type=String,Description="eQTL pvalue for this locus.">' >> header.tmp
        bcftools view --regions-file {input.tsv} -f PASS -i 'AC>0 & F_MISSING<0.1' {input.vcf} | 
            bcftools annotate -a {input.tsv} -c CHROM,POS,-,REF,ALT,eQTL_gene,eQTL_pvalue,-  -h header.tmp -o {output.eqtl}
        tabix {output.eqtl}

         bcftools query -f "[%SAMPLE\t%INFO/eQTL_gene\t%GT\n]" {output.eqtl} > {output.tsv} 
        '''

# Reformat genotype annotation to number of eQTL alleles, and format to 1 gene per line  
rule format_eqtls:
    input: "data/expression/genotypes.top_eQTL.tsv"
    output: "data/expression/genotypes.top_eQTL.format.tsv"
    shell:
        '''
        Rscript scripts/format_eqtls.R {input} > {output}
        '''

# Filter rnaseq counts to protein_coding / lincRNA genes, and drop genes with low counts.
rule filter_genes:
    input:
        gencode=expand("data/gencode/gencode.v{ver}.annotation.chr-renamed.{{cfg}}.bed", ver=config["gencode_version"]),
        counts="data/expression/rawGeneCounts.csv"
    output: "data/expression/rawGeneCounts.{cfg}.csv"
    shell:
        '''
        Rscript scripts/filter_genes.R {input.counts} {input.gencode} {config[raw_min]} > {output}
        '''

# Normalize raw counts using TPM & filter to genes with normalized counts >0.1 for 20% of subjects.
rule normalize_counts:
    input: 
        gene_length=expand("data/gencode/gencode.v{ver}.annotation.chr-renamed.gene_lengths.tsv", ver=config["gencode_version"]),
        counts="data/expression/rawGeneCounts.{cfg}.csv"
    output: "data/expression/geneCounts.tpm.{cfg}.csv"
    shell:
        '''
        Rscript scripts/normalize_counts.R {input.counts} {input.gene_length} {config[tpm_gene_length]} {config[tpm_min]} {config[tpm_min_proportion]} > {output}
        '''

# Calculate top PCs over normalized count matrix.
rule pca:
     input: "data/expression/geneCounts.tpm.{cfg}.csv"
     output: "data/expression/expressionPCs.{cfg}.tsv"
     shell:
        '''
        Rscript scripts/pca.R {input} > {output}
        '''

# Filter to desired covariates & convert to desired type.
rule format_covariates:
    input: "data/expression/metadata.csv",
    output: "data/expression/covariates.known.tsv"
    shell:
        '''
        Rscript scripts/format_covs.R {input} config/covariates > {output}
        '''

# Combine known covariates & hidden covariates.
# Also filters out known covariates that have high overlap with PCs.
rule combine_covariates:
    input: 
        cov="data/expression/covariates.known.tsv",
        gpc="data/expression/geneticPCs.tsv",
        pca="data/expression/expressionPCs.{cfg}.tsv"
    output: "data/expression/covariates.combined.{cfg}.pcs{pc}.gpc{gpc}.tsv"
    shell:
        '''
        Rscript scripts/combine_covs.R {input.cov} {input.gpc} {input.pca} {wildcards.gpc} {wildcards.pc} > {output}
        '''

# Calculate residuals (with eQTLs)
rule residualize_eqtl:
    input: 
        covs="data/expression/covariates.combined.pcs{pc}.gpc{gpc}.tsv",
        cts="data/expression/geneCounts.tpm.{cfg}.csv",
        eqtls="data/expression/genotypes.top_eQTL.format.tsv"
    output: "data/expression/residuals.eqtls.{cfg}.pcs{pc}.gpc{gpc}.tsv"
    shell:
        '''
        Rscript scripts/residuals.R {input.covs} {input.cts} {input.eqtls} > {output}
        '''


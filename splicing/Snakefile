""" Process splicing data using LeafCutter and SPOT. """

# Get list of sample IDs from the juncfiles.txt file.
import os
jf="data/splicing/juncfiles.txt"
IDS = [os.path.basename(f).strip('.junc') for f in open(jf).read().splitlines()]

# Run Leafcutter to cluster the .junc files.
rule leafcutter:
    input: "data/splicing/juncfiles.txt"
    output: 
        gz="data/splicing/Introns_perind_numers.counts.gz",
        ct="data/splicing/Introns_perind_numers.counts"
    shell:
        '''
        python2 leafcutter/clustering/leafcutter_cluster.py -j data/splicing/juncfiles.txt -m 50 -o data/splicing/Introns -l 500000 --checkchrom True
        gunzip -c {output.gz} > {output.ct}
        '''

# Filter out junctions where all samples have <15 reads
rule filter_junctions:
    input: "data/splicing/Introns_perind_numers.counts"
    output: "data/splicing/introns.keep.junc"
    shell:
        '''
        sh scripts/filter_junctions.sh {input} 15 > {output}
        '''

# filter each .junc file by junctions selected in previous rule
rule filter_juncfiles:
    input: 
        junc="data/splicing/junc/{id}.junc",
        keepjunc="data/splicing/introns.keep.junc"
    output: "data/splicing/junc/{id}_filtered.junc"
    shell:
        '''
          bedtools intersect -f 1 -r -a {input.junc} -b {input.keepjunc} -wa > {output}
        '''

# Make list of filterd junction files.
rule filter_juncfiles_filelist:
    input: expand("data/splicing/junc/{id}_filtered.junc", id=IDS)
    output: "data/splicing/juncfiles.filt.txt"
    shell:
        '''
        touch {output}
        for i in {input}; do echo $i >> {output}; done
        '''

# run Leafcutter clustering again on the filtered .junc files
rule leafcutter_filtered:
    input: "data/splicing/juncfiles.filt.txt"
    output: gz=temp("data/splicing/filtered.Introns_perind_numers.counts.gz"),
            ct="data/splicing/filtered.Introns_perind_numers.counts"
    shell:
        '''
        python2 leafcutter/clustering/leafcutter_cluster.py -j data/splicing/juncfiles.filt.txt -m 50 -o data/splicing/filtered.Introns -l 500000 --checkchrom True
        gunzip -c {output.gz} > {output.ct}
        '''

# Removed all junctions in a cluster where 10% of the samples had less than 3 reads (summed across the cluster)
rule filter_clusters:
    input: "data/splicing/filtered.Introns_perind_numers.counts"
    output: "data/splicing/cluster.filtered.Introns_perind_numers.counts"
    shell:
        '''
        Rscript scripts/filter_clusters.R {input} > {output}
        '''
 
# Map genes to junctions & clusters
rule map_genes:
    input: 
        counts="data/splicing/cluster.filtered.Introns_perind_numers.counts",
        gencode="data/gencode/gencode.v27.annotation.chr-renamed.protein_coding.lincRNA.bed"
    output: 
        counts="data/splicing/gene.cluster.filtered.Introns_perind_numers.counts",
        cluster_genemap="data/splicing/cluster_gene.tsv",
        cl_bed=temp("data/splicing/cluster.filtered.junc"),
        intersect_bed=temp("data/splicing/intersect.bed"),
    shell:
        '''
        # Make list of cluster:gene mappings using bedtools
        sh scripts/map_genes.sh {input.counts} {input.gencode} {output.cl_bed} {output.intersect_bed} > {output.cluster_genemap}
        # Add genes to cluster names in the cluster read count file
        Rscript scripts/map_genes.R {input.counts} {output.cluster_genemap} > {output.counts}
        '''

# Run SPOT & output empirical pvalues.
# This has to be run manually in a separate py2 environment, since Snakemake only supports py3
# Leafcutter is also in py2 but requires no packages so it's runnable in a py3 environment.
# mamba create --name spot python=2.7 pystan numpy 
rule spot:
    input: "data/splicing/gene.cluster.filtered.Introns_perind_numers.counts"
    output: "data/splicing/out_empirical_pvalue_gene.tsv"
    shell:
        '''
        python2 SPOT/spot.py --juncfile {input} --outprefix data/splicing/out
        '''

# Calculate the minimum pvalue over clusters for each gene.
rule spot_min:
    input: 
         cluster="data/splicing/cluster_gene.tsv",
         pval="data/splicing/out_empirical_pvalue_gene.tsv"
    output: "data/splicing/min_empirical_pvalue_gene.tsv"
    shell:
        '''
        Rscript scripts/min_pvalue.R {input.pval} {input.cluster} > {output}
        '''

